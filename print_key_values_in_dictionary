
#Creating Dictionaries with string as key and int as value                             
wordFrequency = {
    "Hello" : 7,
    "hi" : 10,
    "there" : 45,
    "at" : 23,
    "this" : 77
    }
........................................................................

#Iterate over the dictionary using items()

for key , value in wordFrequency.items():
    print(key, " :: ", value)
.......................................................................................

#Iterate over the dictionary using for loop

for key in wordFrequency:
    value = wordFrequency[key]
    print(key, " :: ", value)
..........................................................................................
Q>what is iterator??
ans...>Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.
....>>Technically speaking, Python iterator object must implement two special methods, __iter__() and __next__(), 
      collectively called the iterator protocol.An object is called iterable if we can get an iterator from it.
 ...>>The iter() function (which in turn calls the __iter__() method) returns an iterator from them.
 EXAMPLE:-
 ...>We use the next() function to manually iterate through all the items of an iterator.
 ...>When we reach the end and there is no more data to be returned, it will raise StopIteration.
 
 # define a list
my_list = [4, 7, 0, 3]
# get an iterator using iter()

my_iter = iter(my_list)
## iterate through it using next() 

#prints 4
print(next(my_iter))

#prints 7
print(next(my_iter))

## next(obj) is same as obj.__next__()

#prints 0
print(my_iter.__next__())

#prints 3
print(my_iter.__next__())

## This will raise error, no items left
next(my_iter)
................................................................................................................


